#include <iostream>
#include <queue>
#include<cstring>
using namespace std;

int dist[1<<16];

void bfs()
{memset(dist,-1,sizeof dist);
  int  mat[16][16]={
 { 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
 { 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
 { 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
 { 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 },
 { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 { 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0 },
 { 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
 { 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
 { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0 },
 { 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0 },
 { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 },
 { 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1 },
 { 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
 { 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1 },
 { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1 },
 { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0 },
};


    dist[(1<<8)-1]=0;
    queue<int > Q;
  Q.push((1<<8)-1);
    while(!Q.empty()){
          unsigned int bit=Q.front();
         Q.pop();
            if(dist[bit]<3){


        for(int i=0;i<16;i++){
                if(bit & 1<<(15-i)){
                for(int j=0;j<16;j++)
            if(mat[i][j]==1 ){
                  unsigned  int bit2=bit;

bit2 = (bit & ~(1<<15-i)) | (1<<(15-j));


           if(dist[bit2]==-1){
                                    Q.push(bit2);
                    dist[bit2]=dist[bit]+1;

           }
            }
        }
            }
        }
    }

}

int main(){

unsigned int  s=0;
bfs();

int t;
cin>>t;
for(int y=0;y<t;y++){
    s=0;
    for(int i=0;i<16;i++){
        char c;
        cin>>c;
        if(c==49)
            s|=(1<<15-i);    }
if(dist[s]>=0)
cout<<"Case #"<<y+1<<": "<<dist[s]<<endl;
else cout<<"Case #"<<y+1<<": more"<<endl;
}
return 0;
}
